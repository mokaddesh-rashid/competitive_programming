 two non-intersecting substrings of length k from an arbitrary string s (its length should be at least 2·k in order to perform this operation) and concatenating them afterwards (preserving the initial order). For example, with the help of 2-scissors you can cut ab and de out of abcde and concatenate them into abde, but not ab and bc since they're intersecting.


#include<bits/stdc++.h>

using namespace std;

#define REV(i,j,k) for(int i=j; i>=k; i--)
#define FOR(i,j,k) for(int i=j; i<=k; i++)
#define MAX  500010


string str, pat;
int lps[MAX], n, m ,k;

void make_lps(string pattern)
{
    int n = pattern.size();

    lps[0] = lps[1] = 0;
    FOR(i,2,n)
    {
        int p = lps[i-1];
        while(true)
        {
            if(pattern[i - 1] == pattern[p])
            {
                lps[i] = p + 1;
                break;
            }

            if(p == 0) break;
            else p = lps[p];
        }
    }

}

int milse[MAX], preMsuf[MAX], shadow[2][MAX], ok;

void kmpFunction(string text,string pattern)
{
    memset(lps, 0, sizeof(lps));
    int n = text.size(), m = pattern.size();

    make_lps(pattern);

    int p = 0, i = 0;

    while(true)
    {
        if(i == n) break;

        if(p < pattern.size() && text[i] == pattern[p])
        {
            if(!shadow[ok][p + 1] && i + 1 >= k )
            {
                shadow[ok][p + 1] = i + 1;
            }
            milse[i] = p + 1;
            p++; i++;
        }
        else
        {
            if(p == 0)
            {
                milse[i] = 0;
                i++;
            }
            else p = lps[p];
        }
    }

    REV(i,m,1)
    {
        p = lps[i];
        if( !shadow[ok][p] && shadow[ok][i]) shadow[ok][p] = shadow[ok][i];
        else if( shadow[ok][i] ) shadow[ok][p] = min(shadow[ok][p], shadow[ok][i]);
    }

    return;
}

int main()
{
    ios::sync_with_stdio(false);
    ///freopen("in.txt", "r", stdin);
    int x, y, z;

    cin >> n >> m >> k;
    cin >> str >> pat;

    kmpFunction(str, pat);


    FOR(i,0,n-1)
    {
        if(milse[i] == m && milse[i] <= k)
        {
            x = max(0, i - k + 1);
            y = x + k;

            x++; y++;

            if(y + k - 1 <= n)
            {
                cout << "Yes\n" << x << ' ' << y << endl;
                return 0;
            }

            x = max(0, (i - milse[i]) + 1);
            z = (n - x);
            if(z < k) x -= (k - z);

            y = 0;

            x++; y++;

            if(x + k - 1 <= n && y + k <= x)
            {
                cout << "Yes\n" << y << ' ' << x << endl;
                return 0;
            }
        }
    }

    ok = 1;
    reverse(str.begin(), str.end());
    reverse(pat.begin(), pat.end());
    kmpFunction(str, pat);

    FOR(i,0,m) if(shadow[1][i]) shadow[1][i] = (n - shadow[1][i]) + 1;

    shadow[0][0] = k;
    shadow[1][0] = n - k + 1;

    FOR(i,0,m)
    {
        x = shadow[0][i];
        y = shadow[1][m - i];

        if(x && y && x < y && max(i, m-i) <= k)
        {
            cout << "Yes\n" << x - k + 1 << ' ' << y << endl;
            return 0;
        }
    }

    cout << "No" << endl;

    return 0;
}